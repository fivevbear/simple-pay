<?xml version="1.0" encoding="UTF-8" ?>
     <!DOCTYPE mapper 
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="cn._42pay.simplepay.db.dao.PaymentSettingDao">

   <resultMap id="paymentSettingResultMap" type="cn._42pay.simplepay.db.entity.PaymentSetting">
       <result column="PAYMENT_SETTING_ID" property="paymentSettingId" jdbcType="BIGINT" />
       <result column="PAY_APP_ID" property="payAppId" jdbcType="VARCHAR" />
       <result column="MERCHANT_ID" property="merchantId" jdbcType="VARCHAR" />
       <result column="USER_ID" property="userId" jdbcType="BIGINT" />
       <result column="USER_NAME" property="userName" jdbcType="VARCHAR" />
       <result column="APP_SECRET" property="appSecret" jdbcType="VARCHAR" />
       <result column="API_SECRET" property="apiSecret" jdbcType="VARCHAR" />
       <result column="CERTIFICATE_PATH" property="certificatePath" jdbcType="VARCHAR" />
       <result column="CERTIFICATE_PWD" property="certificatePwd" jdbcType="VARCHAR" />
       <result column="MEDICARE_API_SECRET" property="medicareApiSecret" jdbcType="VARCHAR" />
       <result column="PUBLIC_KEY" property="publicKey" jdbcType="VARCHAR" />
       <result column="PRIVATE_KEY" property="privateKey" jdbcType="VARCHAR" />
       <result column="PAY_PUBLIC_KEY" property="payPublicKey" jdbcType="VARCHAR" />
       <result column="PARTNER_ID" property="partnerId" jdbcType="VARCHAR" />
       <result column="PAY_CODE" property="payCode" jdbcType="VARCHAR" />
       <result column="PAY_MODE" property="payMode" jdbcType="INTEGER" />
       <result column="NOTIFY_URL" property="notifyUrl" jdbcType="VARCHAR" />
       <result column="NOTIFY_KEY" property="notifyKey" jdbcType="VARCHAR" />
       <result column="ENABLE_FLAG" property="enableFlag" jdbcType="SMALLINT" />
       <result column="DESCRIPTION" property="description" jdbcType="VARCHAR" />
       <result column="PERSONAL_TRANSFER_STR" property="personalTransferStr" jdbcType="VARCHAR" />
       <result column="PARENT_PAYMENT_SETTING_ID" property="parentPaymentSettingId" jdbcType="INTEGER" />
       <result column="CREATE_TIME" property="createTime" jdbcType="TIMESTAMP" />
       <result column="UPDATE_TIME" property="updateTime" jdbcType="TIMESTAMP" />
   </resultMap>

   <select id="select" resultMap="paymentSettingResultMap">
      select
      <choose>
          <when test="_parameter!=null and _parameter.containsKey('selects') and selects != null">
               <foreach collection="selects" item="item" index="index" separator="," >a.${item}</foreach>
          </when>
          <otherwise>
                a.*    
          </otherwise>
      </choose>
      from pay_payment_setting a 
       <if test="_parameter!=null and _parameter.containsKey('wheres') and wheres != null">
           <where>
          <if test="wheres.paymentSettingId != null ">  and a.PAYMENT_SETTING_ID = #{wheres.paymentSettingId,jdbcType=BIGINT}</if>
          <if test="wheres.payAppId != null  "> 
            <choose> 
                <when test="_parameter.containsKey('isLike') and isLike != null and isLike == true" > 
                    and a.PAY_APP_ID like CONCAT(#{wheres.payAppId,jdbcType=VARCHAR},'%') 
                </when> 
                <otherwise> 
                    and a.PAY_APP_ID = #{wheres.payAppId,jdbcType=VARCHAR} 
                </otherwise> 
            </choose> 
          </if> 
          <if test="wheres.merchantId != null  "> 
            <choose> 
                <when test="_parameter.containsKey('isLike') and isLike != null and isLike == true" > 
                    and a.MERCHANT_ID like CONCAT(#{wheres.merchantId,jdbcType=VARCHAR},'%') 
                </when> 
                <otherwise> 
                    and a.MERCHANT_ID = #{wheres.merchantId,jdbcType=VARCHAR} 
                </otherwise> 
            </choose> 
          </if> 
          <if test="wheres.userId != null ">  and a.USER_ID = #{wheres.userId,jdbcType=BIGINT}</if>
          <if test="wheres.userName != null  "> 
            <choose> 
                <when test="_parameter.containsKey('isLike') and isLike != null and isLike == true" > 
                    and a.USER_NAME like CONCAT(#{wheres.userName,jdbcType=VARCHAR},'%') 
                </when> 
                <otherwise> 
                    and a.USER_NAME = #{wheres.userName,jdbcType=VARCHAR} 
                </otherwise> 
            </choose> 
          </if> 
          <if test="wheres.appSecret != null  "> 
            <choose> 
                <when test="_parameter.containsKey('isLike') and isLike != null and isLike == true" > 
                    and a.APP_SECRET like CONCAT(#{wheres.appSecret,jdbcType=VARCHAR},'%') 
                </when> 
                <otherwise> 
                    and a.APP_SECRET = #{wheres.appSecret,jdbcType=VARCHAR} 
                </otherwise> 
            </choose> 
          </if> 
          <if test="wheres.apiSecret != null  "> 
            <choose> 
                <when test="_parameter.containsKey('isLike') and isLike != null and isLike == true" > 
                    and a.API_SECRET like CONCAT(#{wheres.apiSecret,jdbcType=VARCHAR},'%') 
                </when> 
                <otherwise> 
                    and a.API_SECRET = #{wheres.apiSecret,jdbcType=VARCHAR} 
                </otherwise> 
            </choose> 
          </if> 
          <if test="wheres.certificatePath != null  "> 
            <choose> 
                <when test="_parameter.containsKey('isLike') and isLike != null and isLike == true" > 
                    and a.CERTIFICATE_PATH like CONCAT(#{wheres.certificatePath,jdbcType=VARCHAR},'%') 
                </when> 
                <otherwise> 
                    and a.CERTIFICATE_PATH = #{wheres.certificatePath,jdbcType=VARCHAR} 
                </otherwise> 
            </choose> 
          </if> 
          <if test="wheres.certificatePwd != null  "> 
            <choose> 
                <when test="_parameter.containsKey('isLike') and isLike != null and isLike == true" > 
                    and a.CERTIFICATE_PWD like CONCAT(#{wheres.certificatePwd,jdbcType=VARCHAR},'%') 
                </when> 
                <otherwise> 
                    and a.CERTIFICATE_PWD = #{wheres.certificatePwd,jdbcType=VARCHAR} 
                </otherwise> 
            </choose> 
          </if> 
          <if test="wheres.medicareApiSecret != null  "> 
            <choose> 
                <when test="_parameter.containsKey('isLike') and isLike != null and isLike == true" > 
                    and a.MEDICARE_API_SECRET like CONCAT(#{wheres.medicareApiSecret,jdbcType=VARCHAR},'%') 
                </when> 
                <otherwise> 
                    and a.MEDICARE_API_SECRET = #{wheres.medicareApiSecret,jdbcType=VARCHAR} 
                </otherwise> 
            </choose> 
          </if> 
          <if test="wheres.publicKey != null  "> 
            <choose> 
                <when test="_parameter.containsKey('isLike') and isLike != null and isLike == true" > 
                    and a.PUBLIC_KEY like CONCAT(#{wheres.publicKey,jdbcType=VARCHAR},'%') 
                </when> 
                <otherwise> 
                    and a.PUBLIC_KEY = #{wheres.publicKey,jdbcType=VARCHAR} 
                </otherwise> 
            </choose> 
          </if> 
          <if test="wheres.privateKey != null  "> 
            <choose> 
                <when test="_parameter.containsKey('isLike') and isLike != null and isLike == true" > 
                    and a.PRIVATE_KEY like CONCAT(#{wheres.privateKey,jdbcType=VARCHAR},'%') 
                </when> 
                <otherwise> 
                    and a.PRIVATE_KEY = #{wheres.privateKey,jdbcType=VARCHAR} 
                </otherwise> 
            </choose> 
          </if> 
          <if test="wheres.payPublicKey != null  "> 
            <choose> 
                <when test="_parameter.containsKey('isLike') and isLike != null and isLike == true" > 
                    and a.PAY_PUBLIC_KEY like CONCAT(#{wheres.payPublicKey,jdbcType=VARCHAR},'%') 
                </when> 
                <otherwise> 
                    and a.PAY_PUBLIC_KEY = #{wheres.payPublicKey,jdbcType=VARCHAR} 
                </otherwise> 
            </choose> 
          </if> 
          <if test="wheres.partnerId != null  "> 
            <choose> 
                <when test="_parameter.containsKey('isLike') and isLike != null and isLike == true" > 
                    and a.PARTNER_ID like CONCAT(#{wheres.partnerId,jdbcType=VARCHAR},'%') 
                </when> 
                <otherwise> 
                    and a.PARTNER_ID = #{wheres.partnerId,jdbcType=VARCHAR} 
                </otherwise> 
            </choose> 
          </if> 
          <if test="wheres.payCode != null  "> 
            <choose> 
                <when test="_parameter.containsKey('isLike') and isLike != null and isLike == true" > 
                    and a.PAY_CODE like CONCAT(#{wheres.payCode,jdbcType=VARCHAR},'%') 
                </when> 
                <otherwise> 
                    and a.PAY_CODE = #{wheres.payCode,jdbcType=VARCHAR} 
                </otherwise> 
            </choose> 
          </if> 
          <if test="wheres.payMode != null ">  and a.PAY_MODE = #{wheres.payMode,jdbcType=INTEGER}</if>
          <if test="wheres.notifyUrl != null  "> 
            <choose> 
                <when test="_parameter.containsKey('isLike') and isLike != null and isLike == true" > 
                    and a.NOTIFY_URL like CONCAT(#{wheres.notifyUrl,jdbcType=VARCHAR},'%') 
                </when> 
                <otherwise> 
                    and a.NOTIFY_URL = #{wheres.notifyUrl,jdbcType=VARCHAR} 
                </otherwise> 
            </choose> 
          </if> 
          <if test="wheres.notifyKey != null  "> 
            <choose> 
                <when test="_parameter.containsKey('isLike') and isLike != null and isLike == true" > 
                    and a.NOTIFY_KEY like CONCAT(#{wheres.notifyKey,jdbcType=VARCHAR},'%') 
                </when> 
                <otherwise> 
                    and a.NOTIFY_KEY = #{wheres.notifyKey,jdbcType=VARCHAR} 
                </otherwise> 
            </choose> 
          </if> 
          <if test="wheres.enableFlag != null ">  and a.ENABLE_FLAG = #{wheres.enableFlag,jdbcType=SMALLINT}</if>
          <if test="wheres.description != null  "> 
            <choose> 
                <when test="_parameter.containsKey('isLike') and isLike != null and isLike == true" > 
                    and a.DESCRIPTION like CONCAT(#{wheres.description,jdbcType=VARCHAR},'%') 
                </when> 
                <otherwise> 
                    and a.DESCRIPTION = #{wheres.description,jdbcType=VARCHAR} 
                </otherwise> 
            </choose> 
          </if> 
          <if test="wheres.personalTransferStr != null  "> 
            <choose> 
                <when test="_parameter.containsKey('isLike') and isLike != null and isLike == true" > 
                    and a.PERSONAL_TRANSFER_STR like CONCAT(#{wheres.personalTransferStr,jdbcType=VARCHAR},'%') 
                </when> 
                <otherwise> 
                    and a.PERSONAL_TRANSFER_STR = #{wheres.personalTransferStr,jdbcType=VARCHAR} 
                </otherwise> 
            </choose> 
          </if> 
          <if test="wheres.parentPaymentSettingId != null ">  and a.PARENT_PAYMENT_SETTING_ID = #{wheres.parentPaymentSettingId,jdbcType=INTEGER}</if>
          <if test="wheres.beginCreateTime != null ">  and a.CREATE_TIME &gt;= #{wheres.beginCreateTime,jdbcType=TIMESTAMP}</if>
          <if test="wheres.endCreateTime != null "> and a.CREATE_TIME &lt;= #{wheres.endCreateTime,jdbcType=TIMESTAMP}</if>
          <if test="wheres.beginUpdateTime != null ">  and a.UPDATE_TIME &gt;= #{wheres.beginUpdateTime,jdbcType=TIMESTAMP}</if>
          <if test="wheres.endUpdateTime != null "> and a.UPDATE_TIME &lt;= #{wheres.endUpdateTime,jdbcType=TIMESTAMP}</if>
          <if test="wheres.otherSql != null and wheres.otherSql !='' ">  and ${wheres.otherSql} </if>
          </where>
      </if>
     <if test="_parameter!=null and _parameter.containsKey('orderColumns') and _parameter.containsKey('isAsc') and orderColumns != null and isAsc != null ">
            order by   <foreach collection="orderColumns" item="item" index="index"  open="(" separator="," close=")">a.${item}</foreach>  
           <choose>
               <when test="isAsc == true">
                     asc 
               </when>
               <otherwise>
                     desc
               </otherwise>
           </choose>
     </if>
      <if test="_parameter!=null and _parameter.containsKey('pageInfo') and pageInfo!=null and pageInfo.pageNum != null  and pageInfo.pageSize != null  ">
               limit #{pageInfo.pageSize,jdbcType=INTEGER} offset ${(pageInfo.pageNum - 1) * pageInfo.pageSize}
      </if>
     </select>


   <select id="selectById" parameterType="java.lang.String" resultMap="paymentSettingResultMap">
         select * from pay_payment_setting where payment_setting_id = #{id,jdbcType=VARCHAR}
   </select>

    <select id="selectByIds" parameterType="java.util.List" resultMap="paymentSettingResultMap">
         select    *    from pay_payment_setting
         where payment_setting_id in  
         <foreach collection="list" item = "id" open="(" separator="," close=")">
            #{id}
         </foreach>
   </select>

   <select id="selectCount" resultType="Long">
         select count(*) from pay_payment_setting a 
       <if test="_parameter!=null and _parameter.containsKey('wheres') and wheres != null">
           <where>
          <if test="wheres.paymentSettingId != null ">  and  a.PAYMENT_SETTING_ID = #{wheres.paymentSettingId,jdbcType=BIGINT}</if>
          <if test="wheres.payAppId != null  "> 
            <choose> 
                <when test="_parameter.containsKey('isLike') and isLike != null and isLike == true" > 
                    and a.PAY_APP_ID like CONCAT(#{wheres.payAppId,jdbcType=VARCHAR},'%') 
                </when> 
                <otherwise> 
                    and a.PAY_APP_ID = #{wheres.payAppId,jdbcType=VARCHAR} 
                </otherwise> 
            </choose> 
          </if> 
          <if test="wheres.merchantId != null  "> 
            <choose> 
                <when test="_parameter.containsKey('isLike') and isLike != null and isLike == true" > 
                    and a.MERCHANT_ID like CONCAT(#{wheres.merchantId,jdbcType=VARCHAR},'%') 
                </when> 
                <otherwise> 
                    and a.MERCHANT_ID = #{wheres.merchantId,jdbcType=VARCHAR} 
                </otherwise> 
            </choose> 
          </if> 
          <if test="wheres.userId != null ">  and  a.USER_ID = #{wheres.userId,jdbcType=BIGINT}</if>
          <if test="wheres.userName != null  "> 
            <choose> 
                <when test="_parameter.containsKey('isLike') and isLike != null and isLike == true" > 
                    and a.USER_NAME like CONCAT(#{wheres.userName,jdbcType=VARCHAR},'%') 
                </when> 
                <otherwise> 
                    and a.USER_NAME = #{wheres.userName,jdbcType=VARCHAR} 
                </otherwise> 
            </choose> 
          </if> 
          <if test="wheres.appSecret != null  "> 
            <choose> 
                <when test="_parameter.containsKey('isLike') and isLike != null and isLike == true" > 
                    and a.APP_SECRET like CONCAT(#{wheres.appSecret,jdbcType=VARCHAR},'%') 
                </when> 
                <otherwise> 
                    and a.APP_SECRET = #{wheres.appSecret,jdbcType=VARCHAR} 
                </otherwise> 
            </choose> 
          </if> 
          <if test="wheres.apiSecret != null  "> 
            <choose> 
                <when test="_parameter.containsKey('isLike') and isLike != null and isLike == true" > 
                    and a.API_SECRET like CONCAT(#{wheres.apiSecret,jdbcType=VARCHAR},'%') 
                </when> 
                <otherwise> 
                    and a.API_SECRET = #{wheres.apiSecret,jdbcType=VARCHAR} 
                </otherwise> 
            </choose> 
          </if> 
          <if test="wheres.certificatePath != null  "> 
            <choose> 
                <when test="_parameter.containsKey('isLike') and isLike != null and isLike == true" > 
                    and a.CERTIFICATE_PATH like CONCAT(#{wheres.certificatePath,jdbcType=VARCHAR},'%') 
                </when> 
                <otherwise> 
                    and a.CERTIFICATE_PATH = #{wheres.certificatePath,jdbcType=VARCHAR} 
                </otherwise> 
            </choose> 
          </if> 
          <if test="wheres.certificatePwd != null  "> 
            <choose> 
                <when test="_parameter.containsKey('isLike') and isLike != null and isLike == true" > 
                    and a.CERTIFICATE_PWD like CONCAT(#{wheres.certificatePwd,jdbcType=VARCHAR},'%') 
                </when> 
                <otherwise> 
                    and a.CERTIFICATE_PWD = #{wheres.certificatePwd,jdbcType=VARCHAR} 
                </otherwise> 
            </choose> 
          </if> 
          <if test="wheres.medicareApiSecret != null  "> 
            <choose> 
                <when test="_parameter.containsKey('isLike') and isLike != null and isLike == true" > 
                    and a.MEDICARE_API_SECRET like CONCAT(#{wheres.medicareApiSecret,jdbcType=VARCHAR},'%') 
                </when> 
                <otherwise> 
                    and a.MEDICARE_API_SECRET = #{wheres.medicareApiSecret,jdbcType=VARCHAR} 
                </otherwise> 
            </choose> 
          </if> 
          <if test="wheres.publicKey != null  "> 
            <choose> 
                <when test="_parameter.containsKey('isLike') and isLike != null and isLike == true" > 
                    and a.PUBLIC_KEY like CONCAT(#{wheres.publicKey,jdbcType=VARCHAR},'%') 
                </when> 
                <otherwise> 
                    and a.PUBLIC_KEY = #{wheres.publicKey,jdbcType=VARCHAR} 
                </otherwise> 
            </choose> 
          </if> 
          <if test="wheres.privateKey != null  "> 
            <choose> 
                <when test="_parameter.containsKey('isLike') and isLike != null and isLike == true" > 
                    and a.PRIVATE_KEY like CONCAT(#{wheres.privateKey,jdbcType=VARCHAR},'%') 
                </when> 
                <otherwise> 
                    and a.PRIVATE_KEY = #{wheres.privateKey,jdbcType=VARCHAR} 
                </otherwise> 
            </choose> 
          </if> 
          <if test="wheres.payPublicKey != null  "> 
            <choose> 
                <when test="_parameter.containsKey('isLike') and isLike != null and isLike == true" > 
                    and a.PAY_PUBLIC_KEY like CONCAT(#{wheres.payPublicKey,jdbcType=VARCHAR},'%') 
                </when> 
                <otherwise> 
                    and a.PAY_PUBLIC_KEY = #{wheres.payPublicKey,jdbcType=VARCHAR} 
                </otherwise> 
            </choose> 
          </if> 
          <if test="wheres.partnerId != null  "> 
            <choose> 
                <when test="_parameter.containsKey('isLike') and isLike != null and isLike == true" > 
                    and a.PARTNER_ID like CONCAT(#{wheres.partnerId,jdbcType=VARCHAR},'%') 
                </when> 
                <otherwise> 
                    and a.PARTNER_ID = #{wheres.partnerId,jdbcType=VARCHAR} 
                </otherwise> 
            </choose> 
          </if> 
          <if test="wheres.payCode != null  "> 
            <choose> 
                <when test="_parameter.containsKey('isLike') and isLike != null and isLike == true" > 
                    and a.PAY_CODE like CONCAT(#{wheres.payCode,jdbcType=VARCHAR},'%') 
                </when> 
                <otherwise> 
                    and a.PAY_CODE = #{wheres.payCode,jdbcType=VARCHAR} 
                </otherwise> 
            </choose> 
          </if> 
          <if test="wheres.payMode != null ">  and  a.PAY_MODE = #{wheres.payMode,jdbcType=INTEGER}</if>
          <if test="wheres.notifyUrl != null  "> 
            <choose> 
                <when test="_parameter.containsKey('isLike') and isLike != null and isLike == true" > 
                    and a.NOTIFY_URL like CONCAT(#{wheres.notifyUrl,jdbcType=VARCHAR},'%') 
                </when> 
                <otherwise> 
                    and a.NOTIFY_URL = #{wheres.notifyUrl,jdbcType=VARCHAR} 
                </otherwise> 
            </choose> 
          </if> 
          <if test="wheres.notifyKey != null  "> 
            <choose> 
                <when test="_parameter.containsKey('isLike') and isLike != null and isLike == true" > 
                    and a.NOTIFY_KEY like CONCAT(#{wheres.notifyKey,jdbcType=VARCHAR},'%') 
                </when> 
                <otherwise> 
                    and a.NOTIFY_KEY = #{wheres.notifyKey,jdbcType=VARCHAR} 
                </otherwise> 
            </choose> 
          </if> 
          <if test="wheres.enableFlag != null ">  and  a.ENABLE_FLAG = #{wheres.enableFlag,jdbcType=SMALLINT}</if>
          <if test="wheres.description != null  "> 
            <choose> 
                <when test="_parameter.containsKey('isLike') and isLike != null and isLike == true" > 
                    and a.DESCRIPTION like CONCAT(#{wheres.description,jdbcType=VARCHAR},'%') 
                </when> 
                <otherwise> 
                    and a.DESCRIPTION = #{wheres.description,jdbcType=VARCHAR} 
                </otherwise> 
            </choose> 
          </if> 
          <if test="wheres.personalTransferStr != null  "> 
            <choose> 
                <when test="_parameter.containsKey('isLike') and isLike != null and isLike == true" > 
                    and a.PERSONAL_TRANSFER_STR like CONCAT(#{wheres.personalTransferStr,jdbcType=VARCHAR},'%') 
                </when> 
                <otherwise> 
                    and a.PERSONAL_TRANSFER_STR = #{wheres.personalTransferStr,jdbcType=VARCHAR} 
                </otherwise> 
            </choose> 
          </if> 
          <if test="wheres.parentPaymentSettingId != null ">  and  a.PARENT_PAYMENT_SETTING_ID = #{wheres.parentPaymentSettingId,jdbcType=INTEGER}</if>
          <if test="wheres.beginCreateTime != null ">  and  a.CREATE_TIME &gt;= #{wheres.beginCreateTime,jdbcType=TIMESTAMP}</if>
          <if test="wheres.endCreateTime != null "> and a.CREATE_TIME &lt;= #{wheres.endCreateTime,jdbcType=TIMESTAMP}</if>
          <if test="wheres.beginUpdateTime != null ">  and  a.UPDATE_TIME &gt;= #{wheres.beginUpdateTime,jdbcType=TIMESTAMP}</if>
          <if test="wheres.endUpdateTime != null "> and a.UPDATE_TIME &lt;= #{wheres.endUpdateTime,jdbcType=TIMESTAMP}</if>
          <if test="wheres.otherSql != null and wheres.otherSql !='' ">  and ${wheres.otherSql} </if>
          </where>
      </if>
     </select>

   <insert id="insert" parameterType="cn._42pay.simplepay.db.entity.PaymentSetting">
        insert into pay_payment_setting
           <trim prefix="(" suffix=")" suffixOverrides="," >
             <if test="paymentSettingId != null" >
               PAYMENT_SETTING_ID,
             </if>
             <if test="payAppId != null" >
               PAY_APP_ID,
             </if>
             <if test="merchantId != null" >
               MERCHANT_ID,
             </if>
             <if test="userId != null" >
               USER_ID,
             </if>
             <if test="userName != null" >
               USER_NAME,
             </if>
             <if test="appSecret != null" >
               APP_SECRET,
             </if>
             <if test="apiSecret != null" >
               API_SECRET,
             </if>
             <if test="certificatePath != null" >
               CERTIFICATE_PATH,
             </if>
             <if test="certificatePwd != null" >
               CERTIFICATE_PWD,
             </if>
             <if test="medicareApiSecret != null" >
               MEDICARE_API_SECRET,
             </if>
             <if test="publicKey != null" >
               PUBLIC_KEY,
             </if>
             <if test="privateKey != null" >
               PRIVATE_KEY,
             </if>
             <if test="payPublicKey != null" >
               PAY_PUBLIC_KEY,
             </if>
             <if test="partnerId != null" >
               PARTNER_ID,
             </if>
             <if test="payCode != null" >
               PAY_CODE,
             </if>
             <if test="payMode != null" >
               PAY_MODE,
             </if>
             <if test="notifyUrl != null" >
               NOTIFY_URL,
             </if>
             <if test="notifyKey != null" >
               NOTIFY_KEY,
             </if>
             <if test="enableFlag != null" >
               ENABLE_FLAG,
             </if>
             <if test="description != null" >
               DESCRIPTION,
             </if>
             <if test="personalTransferStr != null" >
               PERSONAL_TRANSFER_STR,
             </if>
             <if test="parentPaymentSettingId != null" >
               PARENT_PAYMENT_SETTING_ID,
             </if>
             <if test="createTime != null" >
               CREATE_TIME,
             </if>
             <if test="updateTime != null" >
               UPDATE_TIME,
             </if>
           </trim>
            <trim prefix="values (" suffix=")" suffixOverrides="," >
             <if test="paymentSettingId != null" >
               #{paymentSettingId,jdbcType=BIGINT},
             </if>
             <if test="payAppId != null" >
               #{payAppId,jdbcType=VARCHAR},
             </if>
             <if test="merchantId != null" >
               #{merchantId,jdbcType=VARCHAR},
             </if>
             <if test="userId != null" >
               #{userId,jdbcType=BIGINT},
             </if>
             <if test="userName != null" >
               #{userName,jdbcType=VARCHAR},
             </if>
             <if test="appSecret != null" >
               #{appSecret,jdbcType=VARCHAR},
             </if>
             <if test="apiSecret != null" >
               #{apiSecret,jdbcType=VARCHAR},
             </if>
             <if test="certificatePath != null" >
               #{certificatePath,jdbcType=VARCHAR},
             </if>
             <if test="certificatePwd != null" >
               #{certificatePwd,jdbcType=VARCHAR},
             </if>
             <if test="medicareApiSecret != null" >
               #{medicareApiSecret,jdbcType=VARCHAR},
             </if>
             <if test="publicKey != null" >
               #{publicKey,jdbcType=VARCHAR},
             </if>
             <if test="privateKey != null" >
               #{privateKey,jdbcType=VARCHAR},
             </if>
             <if test="payPublicKey != null" >
               #{payPublicKey,jdbcType=VARCHAR},
             </if>
             <if test="partnerId != null" >
               #{partnerId,jdbcType=VARCHAR},
             </if>
             <if test="payCode != null" >
               #{payCode,jdbcType=VARCHAR},
             </if>
             <if test="payMode != null" >
               #{payMode,jdbcType=INTEGER},
             </if>
             <if test="notifyUrl != null" >
               #{notifyUrl,jdbcType=VARCHAR},
             </if>
             <if test="notifyKey != null" >
               #{notifyKey,jdbcType=VARCHAR},
             </if>
             <if test="enableFlag != null" >
               #{enableFlag,jdbcType=SMALLINT},
             </if>
             <if test="description != null" >
               #{description,jdbcType=VARCHAR},
             </if>
             <if test="personalTransferStr != null" >
               #{personalTransferStr,jdbcType=VARCHAR},
             </if>
             <if test="parentPaymentSettingId != null" >
               #{parentPaymentSettingId,jdbcType=INTEGER},
             </if>
             <if test="createTime != null" >
               #{createTime,jdbcType=TIMESTAMP},
             </if>
             <if test="updateTime != null" >
               #{updateTime,jdbcType=TIMESTAMP},
             </if>
           </trim>
   </insert>

   <update id="update" parameterType="cn._42pay.simplepay.db.entity.PaymentSetting">
        update pay_payment_setting
        <set>
           <if test="payAppId != null ">PAY_APP_ID = #{payAppId,jdbcType=VARCHAR},</if>
           <if test="merchantId != null ">MERCHANT_ID = #{merchantId,jdbcType=VARCHAR},</if>
           <if test="userId != null ">USER_ID = #{userId,jdbcType=BIGINT},</if>
           <if test="userName != null ">USER_NAME = #{userName,jdbcType=VARCHAR},</if>
           <if test="appSecret != null ">APP_SECRET = #{appSecret,jdbcType=VARCHAR},</if>
           <if test="apiSecret != null ">API_SECRET = #{apiSecret,jdbcType=VARCHAR},</if>
           <if test="certificatePath != null ">CERTIFICATE_PATH = #{certificatePath,jdbcType=VARCHAR},</if>
           <if test="certificatePwd != null ">CERTIFICATE_PWD = #{certificatePwd,jdbcType=VARCHAR},</if>
           <if test="medicareApiSecret != null ">MEDICARE_API_SECRET = #{medicareApiSecret,jdbcType=VARCHAR},</if>
           <if test="publicKey != null ">PUBLIC_KEY = #{publicKey,jdbcType=VARCHAR},</if>
           <if test="privateKey != null ">PRIVATE_KEY = #{privateKey,jdbcType=VARCHAR},</if>
           <if test="payPublicKey != null ">PAY_PUBLIC_KEY = #{payPublicKey,jdbcType=VARCHAR},</if>
           <if test="partnerId != null ">PARTNER_ID = #{partnerId,jdbcType=VARCHAR},</if>
           <if test="payCode != null ">PAY_CODE = #{payCode,jdbcType=VARCHAR},</if>
           <if test="payMode != null ">PAY_MODE = #{payMode,jdbcType=INTEGER},</if>
           <if test="notifyUrl != null ">NOTIFY_URL = #{notifyUrl,jdbcType=VARCHAR},</if>
           <if test="notifyKey != null ">NOTIFY_KEY = #{notifyKey,jdbcType=VARCHAR},</if>
           <if test="enableFlag != null ">ENABLE_FLAG = #{enableFlag,jdbcType=SMALLINT},</if>
           <if test="description != null ">DESCRIPTION = #{description,jdbcType=VARCHAR},</if>
           <if test="personalTransferStr != null ">PERSONAL_TRANSFER_STR = #{personalTransferStr,jdbcType=VARCHAR},</if>
           <if test="parentPaymentSettingId != null ">PARENT_PAYMENT_SETTING_ID = #{parentPaymentSettingId,jdbcType=INTEGER},</if>
           <if test="createTime != null ">CREATE_TIME = #{createTime,jdbcType=TIMESTAMP},</if>
           <if test="updateTime != null ">UPDATE_TIME = #{updateTime,jdbcType=TIMESTAMP},</if>
        </set>
          where payment_setting_id = #{paymentSettingId,jdbcType=VARCHAR}
   </update>

   <delete id="delete" parameterType="cn._42pay.simplepay.db.entity.PaymentSetting">
     delete from pay_payment_setting
          where payment_setting_id = #{paymentSettingId,jdbcType=VARCHAR}
   </delete>

   <delete id="deleteByIds" parameterType="java.util.List">
      delete from pay_payment_setting
          where payment_setting_id in 
          <foreach collection="list" item = "id" open="(" separator="," close=")">
                #{id}
          </foreach>
   </delete>

   <insert id="batchInsert" parameterType="java.util.List">
        insert into pay_payment_setting
           <trim prefix="(" suffix=")" suffixOverrides="," >
               PAYMENT_SETTING_ID,
               PAY_APP_ID,
               MERCHANT_ID,
               USER_ID,
               USER_NAME,
               APP_SECRET,
               API_SECRET,
               CERTIFICATE_PATH,
               CERTIFICATE_PWD,
               MEDICARE_API_SECRET,
               PUBLIC_KEY,
               PRIVATE_KEY,
               PAY_PUBLIC_KEY,
               PARTNER_ID,
               PAY_CODE,
               PAY_MODE,
               NOTIFY_URL,
               NOTIFY_KEY,
               ENABLE_FLAG,
               DESCRIPTION,
               PERSONAL_TRANSFER_STR,
               PARENT_PAYMENT_SETTING_ID,
               CREATE_TIME,
               UPDATE_TIME,
           </trim>
           VALUES 
           <foreach collection="list" item="item" index="index" separator="," > 
               <trim prefix=" (" suffix=")" suffixOverrides="," >
                #{item.paymentSettingId,jdbcType=BIGINT},
                #{item.payAppId,jdbcType=VARCHAR},
                #{item.merchantId,jdbcType=VARCHAR},
                #{item.userId,jdbcType=BIGINT},
                #{item.userName,jdbcType=VARCHAR},
                #{item.appSecret,jdbcType=VARCHAR},
                #{item.apiSecret,jdbcType=VARCHAR},
                #{item.certificatePath,jdbcType=VARCHAR},
                #{item.certificatePwd,jdbcType=VARCHAR},
                #{item.medicareApiSecret,jdbcType=VARCHAR},
                #{item.publicKey,jdbcType=VARCHAR},
                #{item.privateKey,jdbcType=VARCHAR},
                #{item.payPublicKey,jdbcType=VARCHAR},
                #{item.partnerId,jdbcType=VARCHAR},
                #{item.payCode,jdbcType=VARCHAR},
                #{item.payMode,jdbcType=INTEGER},
                #{item.notifyUrl,jdbcType=VARCHAR},
                #{item.notifyKey,jdbcType=VARCHAR},
                #{item.enableFlag,jdbcType=SMALLINT},
                #{item.description,jdbcType=VARCHAR},
                #{item.personalTransferStr,jdbcType=VARCHAR},
                #{item.parentPaymentSettingId,jdbcType=INTEGER},
                #{item.createTime,jdbcType=TIMESTAMP},
                #{item.updateTime,jdbcType=TIMESTAMP},
              </trim>
           </foreach> 
   </insert>

</mapper>